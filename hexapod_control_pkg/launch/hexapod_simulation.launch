<?xml version="1.0"?>

<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <!--arg name="world_name" value="$(find rrbot_gazebo)/worlds/rrbot.world"/-->
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description"
    command="$(find xacro)/xacro.py '$(find hexapod_description_pkg)/urdf/hexapod_gazebo_transmission.xacro'" />

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -model robot_model -param robot_description"/>

  <!-- Load joint controller configurations from YAML file to parameter server -->
  <rosparam file="$(find hexapod_control)/config/hexapod_control.yaml" command="load"/>

  <!-- load the controllers -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
    output="screen" ns="/hexapod" args="joint_state_controller
                                      coxa_l1_joint_position_controller
                                      coxa_l2_joint_position_controller
                                      coxa_l3_joint_position_controller
                                      coxa_r1_joint_position_controller
                                      coxa_r2_joint_position_controller
                                      coxa_r3_joint_position_controller
                                      femur_l1_joint_position_controller
                                      femur_l2_joint_position_controller
                                      femur_l3_joint_position_controller
                                      femur_r1_joint_position_controller
                                      femur_r2_joint_position_controller
                                      femur_r3_joint_position_controller
                                      tibia_l1_joint_position_controller
                                      tibia_l2_joint_position_controller
                                      tibia_l3_joint_position_controller
                                      tibia_r1_joint_position_controller
                                      tibia_r2_joint_position_controller
                                      tibia_r3_joint_position_controller"/>

  <!-- convert joint states to TF transforms for rviz, etc -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
    respawn="false" output="screen">
    <remap from="/joint_states" to="/hexapod/joint_states" />
  </node>

</launch>